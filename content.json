{"meta":{"title":"DragonBaby308","subtitle":null,"description":null,"author":"DragonBaby308","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-11-15T17:29:48.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-11-15T17:29:48.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-11-15T17:29:48.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-11-15T17:29:48.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-11-15T17:29:48.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"算法专题——动态规划","slug":"Algorithm-DP","date":"2019-09-03T14:40:22.000Z","updated":"2019-12-13T14:37:35.975Z","comments":true,"path":"Algorithm-DP/","link":"","permalink":"/Algorithm-DP/","excerpt":"","text":"算法专题——动态规划 参考自《动态规划套路详解》，写得真好。 动态规划（Dynamic Programming, DP）是一种将原有问题分解为相对简单的子问题，来求解复杂问题的方法，常常适用于有重叠子问题和最优子结构性质的问题。 最优子结构：原问题的解由子问题的最优解构成，并且子问题必须相互独立、互不干扰 原理：将重复计算子问题转化为查表，保证每个子问题只计算一次 —— 一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。 用途：DP常用于优化递归问题，使用递归求解时如果需要计算很多次重复子问题，那么利用DP可以减少计算量，具有天然剪枝的功能。 解DP问题的关键：找到状态转移方程 找到状态转移方程，也就意味着找到了一种暴力破解的方法。 （〇）解DP的惯用三步骤1.递归 自顶向下，画递归树，找到递归解法，发现重复子问题。 可以看到存在很多重复计算。 int countPaths(boolean[][] grid, int row, int col) { if (!validSquare(grid, row, col)) { return 0; } if (isAtEnd(grid, row, col)) { return 1; } return countPaths(grid, row + 1, col) + countPaths(grid, row, col + 1); } 2.递归 + 记忆化 将重复子问题进行记忆化存储 将每次计算所得结果存入一个数组中，每次不是重新求，而是查数组。 3.定义状态数组，递推状态转移方程 定义状态数组（即dp[n]数组） 自底向上，递推出状态转移方程，解决DP //边界条件：最下面一行和最右边一列，opt[i, j] = 0，只有一种走法 if (a[i, j] = &#39;空地&#39;) { opt[i, j] = opt[i - 1, j] + opt[i, j - 1]; }else { //石头 opt[i, j] = 0; } （一）背包问题将一系列具有重量w的物品（可能还有价值v），放入一个总容量为C的背包中，满足某种条件（比如放入的物品重量和恰好为C/重量和最大/价值和最大）。 （1）0-1背包0-1背包隐含的信息是： 对于每种物品只有两种选择，即“完全装入背包”/“不装入背包”。 不能将同一个物品装入背包多次，也不能只装一个物品的一部分。 ①物品无价值：【重量和恰好为C/重量和最大】假设有一个总容量为C的背包和n件重量分别为w1,w2,..,wn的物品，能否从n件物品中挑选若干件正好装满背包。 当C=10，6件物品种类分别为{1,8,4,3,5,2}，可以找到以下4组解：(1,4,3,2)、(1,4,5)、(8,2)、(3,5,2) 状态转移方程：maxValue[i][j] = Math.max(maxValue[i -1][j], maxValue[i - 1][j - w[i]] + w[i]);，其中0 &lt;= i &lt; n - 1，0 &lt;= j &lt;= C 无价值的0-1背包问题（重量和最大） ②物品有价值：【价值和最大】假设有一个总容量为C的背包，n种物品满足第i种物品重量为wi、价值为vi，应该如何选择装入背包的物品，使得装入背包中的物品价值和最大。 用一个二维数组maxValue[i][C]来表示第i种物品装入容量为C的背包时的最大价值 第i种物品装入背包时最大价值有两种情况： 装入第i种物品时，容量超过C：此时最大价值就是不装入第i种物品时的最大价值 —— maxValue[i-1][C] 装入第i种物品时，容量不超过C：此时最大价值需要在前i-1种物品最大价值上加上第i种物品的价值，同时前i-1种物品的容量需要减去第i种物品的容量 —— vi + maxValue[i - 1][C - wi] 状态转移方程：maxValue[i][C] = Math.max(maxValue[i - 1][C], vi + maxValue[i - 1][C - wi]); //@params: int[] w 重量 //@params: int[] v 价值 //@params: int C 背包容量 public static int knapsack(int[] w, int[] v, int C) { int size = w.length(); if(size &lt;= 0) return 0; //最大价值数组 int[][] maxValue = new int[size][C + 1]; //边界值——只填入物品0时的最大价值 for(int i = 0; i &lt;= C; i++) { //判断容量是否超过 maxValue[0][i] = w[0] &gt; C ? 0 : v[0]; } //状态转移方程 for(int j = 1; j &lt; size; j++){ for(int k = 0; k &lt;= C; k++){ //这一步是为了过滤掉k - w[j] &lt; 0的情况，防止数组越界 maxValue[j][k] = maxValue[j - 1][k]; if(w[j] &lt;= k) maxValue[j][k] = Math.max(maxValue[j][k] , maxValue[j - 1][k - w[j]] + v[j]); } } //总共size种，从0开始 return maxValue[size - 1][C]; } 以上DP使用了二维数组，空间复杂度是O(n * C)。可以优化为一维数组： //... int[] maxValue = new int[C + 1]; //边界值——只填入第0种物品 for(int i = 0; i &lt;= C; i++){ maxValue[i] = w[i] &lt; i ? v[i] : 0; } //状态转移方程 for(int j = 1; j &lt; size; j++){ //从后往前遍历，防止计算结果被覆盖 for(int k = C; k &gt;= w[j]; k--){ maxValue[k] = Math.max(maxValue[k], v[j] + maxValue[k - w[j]]); } } return maxValue[C]; （2）完全背包 与“0-1背包”的区别在于每种物品可以放无限次。 假设有一个总容量为C的背包，n种物品满足第i种物品重量为wi、价值为vi，每种物品可以放入无限多次，应该如何选择装入背包的物品，使得装入背包中的物品价值和最大。 （3）多重背包与“0-1背包”的区别在于每种物品有一个固定的次数上限。 （二）Leetcode easy1.最大子序和 https://leetcode-cn.com/problems/maximum-subarray/ 给定一个整数数组nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 输入: [-2,1,-3,4,-1,2,1,-5,4] 输出: 6 解释: 连续子数组 [4,-1,2,1] 的和最大，为 6 扫描法 思路：加上一个正数和会增加，加上一个负数和会减少；由于子数组是连续的，所以对于当前元素来说，如果加入之前子数组和中得到了一个负数，那么就将累加结果丢弃并清零，子数组从当前元素重新开始遍历即可。 看到网上有人将其类比成了“赌徒理论” —— 永远只记住自己赢钱的时候，如果哪一天查看总资产发现自己亏本了，就将这一天之前的那些天都忘记，从0开始赌。 时间复杂度：O(N) //8 ms //3.3 MB func scanMaxSubArray(nums []int) int { //最大子数组和，由于子数组必然连续且非空，所以初始值即第一个元素 max := nums[0] //当前子数组和 sum := 0 //遍历数组，将当前元素加入子数组（并不需要真正的加入，因为我们关心的只是加入后的数组和） for i := 0; i &lt; len(nums); i++ { sum += nums[i] //如果加入的是正数，更新最大值 if sum &gt; max { max = sum } //如果和为负数，将和丢弃并清空，即子数组开始元素变更为当前元素 if sum &lt; 0 { sum = 0 } } return max } DP 状态转移方程：dp[i] = max(dp[i - 1] + nums[i], nums[i]) 时间复杂度：O(N) //8 ms //3.5 MB func dpMaxSubArray(nums []int) int { max := nums[0] length := len(nums) dp := make([]int, length) //dp[i]代表的是数组下标为i的元素加入后，子数组中最大值 //所以可以知道dp[0] = nums[0]，即第一个元素 dp[0] = nums[0] for i := 1; i &lt; length; i++ { dp[i] = nums[i] if sum := dp[i -1] + nums[i]; sum &gt; max { dp[i] = sum } //记录最大值 if sum &gt; max { max = sum } } return max } 2.买卖股票的最佳时机给定一个数组，它的第i个元素是一支给定股票第i天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。注意你不能在买入股票前卖出股票。 输入: [7,1,5,3,6,4] 输出: 5 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。 输入: [7,6,4,3,1] 输出: 0 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。 O(N)解法这种思路是很容易想到的，记录最小元素min和最大差值max，遍历数组，将当前位置元素和min做减法，更新max和min： // 12 ms // 3.1 MB func maxProfit(prices []int) int { l := len(prices) if l &lt;= 1 { return 0 } max := 0 //最大差值 min := prices[0] //股票买入最低价 for i := 1; i &lt; l; i++ { tmp := prices[i] - min //此时卖出赚到的钱 if tmp &gt; max { max = tmp } //如果赚到的钱是负数，更新最小值 if tmp &lt; 0 { min = prices[i] } } return max } DP根据惯有套路，我们要先定义状态数组，然后递推出DP的状态转移方程。那么状态数组如何定义呢？ 首先最容易想到的是一维状态数组：mp[i]代表的是到第i天的最大利润。在第i天的时候可以选择买入股票或者卖出股票，尝试来写状态转移方程：mp[i] = (price[i] &gt;= 0) ? (mp[i - 1] - price[i]) : (mp[i - 1] + price[i])。但是这样写是不对的！我们还有其他的限制条件：买入股票时手里不能持有股票、卖出股票时手里必须有股票，所以只用一个一维数组来定义状态是不够的。 我们增加一个维度：mp[i][has]代表的是到第i天的最大利润，has ∈ {0, 1}，0表示手中未持有股票，1表示手中持有股票。在第i - 1天如果手中没有股票，我们可以第i天保持原状或者选择买入，选择两者中的最大值；如果第i - 1天手中持有股票，我们可以在第i天保持原状或者卖出，选择两者中的最大值。状态转移方程变成了： mp[i][0] = max(mp[i - 1][0], mp[i - 1][1] + price[i]) //卖出股票，利润加上价格 mp[i][1] = max(mp[i - 1][1], mp[i - 1][0] - price[i]) //买入股票，利润减去价格 那么使用二维数组就够了吗？答案是还是不够，我们还有一个限制条件：最多只能买卖k次股票（本题中k = 1）。所以我们要再增加一个维度：mp[i][cnt][has]代表的是到第i天的最大利润，cnt代表第i天之前交易股票的次数，has ∈ {0, 1}（0表示手中未持有股票，1表示手中持有股票）。状态转移方程变成了： mp[i][k][0] = max(mp[i - 1][k][0], mp[i - 1][k - 1][1] + price[i]) //卖出股票，利润加上价格 mp[i][k][1] = max(mp[i - 1][k][1], mp[i - 1][k - 1][0] - price[i]) //买入股票，利润减去价格 到这一步，最大利润就变成了max( mp[n - 1][cnt][0] ), cnt在[0, k]范围内循环 那么如果题目改为手中最多持有X股票呢？has在[0, X]范围内循环即可。状态转移方程：mp[i][k][j] = max(mp[i - 1][k][j], mp[i - 1][k - 1][j + 1] + price[i], mp[i - 1][k - 1][j - 1] - price[i])","categories":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}],"tags":[{"name":"算法","slug":"算法","permalink":"/tags/算法/"},{"name":"背包问题","slug":"背包问题","permalink":"/tags/背包问题/"},{"name":"0-1背包","slug":"0-1背包","permalink":"/tags/0-1背包/"},{"name":"完全背包","slug":"完全背包","permalink":"/tags/完全背包/"},{"name":"DP","slug":"DP","permalink":"/tags/DP/"},{"name":"递归","slug":"递归","permalink":"/tags/递归/"}],"keywords":[{"name":"算法","slug":"算法","permalink":"/categories/算法/"}]}]}